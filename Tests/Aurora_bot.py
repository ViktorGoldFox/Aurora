 #-=-=-=-=-=-=-=-=-=-=-=-
#–°–æ–∑–¥–∞—Ç–µ–ª—å:ViktorGoldFox
#-=-=-=-=-=-=-=-=-=-=-=-
#Aurora bot
from shlex import join
from site import check_enableusersite
from time import sleep 
import telebot
import pandas as pd
import schedule
import datetime
from datetime import timedelta
import threading
from urllib import request 
import requests 
import pymorphy2
import openai
from translate import Translator
import base64
from telebot import types
from logzero import logger, logfile
import Generator
import DataBase
from gigachat import GigaChat

logfile("logs.log")

tex_stat = False
version = 'v5'

donate_url = 'https://boosty.to/vitusik_kentusik.org/donate'
#OpenAi
openai.api_key = "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"
request_gpt_coll = 0
request_gpt_rekl = 0

Gigachat_token = 'Y2Q4ZmU4YWEtOWE5OS00OGU4LWExNjEtM2U2YWE2Y2NlYzYwOjQzNzI4YjE4LWM1YzAtNDIzYy1iZTA0LWE2OTE1YjE5Yzc3Zg=='
request_gen_rekl = 0
request_gen_coll = 0

AIlimit = 50
Animspeed = 0.03
Text_limit = 800

# translator= Translator(from_lang="Russian",to_lang="English")

#–£–∫–∞–∑–∞–Ω–∏–µ —Å–∞–π—Ç–∞ –ø–æ–≥–æ–¥—ã (Open wheather)
url = 'https://api.openweathermap.org/data/2.5/weather?q=Saint%20Petersburg&units=metric&lang=ru&appid=c38e5a3db7bd33d13d9d0c37f83ccdec'

#–ë–æ—Ç –∫–æ–Ω—Ñ–∏–≥ 
chatid = '-1001665880322'
token = '6904577368:AAHMjsneMF0HaLHiWa08Bv2ZzBZOwIJ7yTo'
# token = '6717661703:AAHP8jd6rYcVRei-4nJ2Satsq1E5aTtIKFA'

bot = telebot.TeleBot(token=token)
    
#–£–∫–∞–∑–∞–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤
admins = [1746901164, 1018366370]
push_message_admin = [admins[0]]
data = pd.read_csv("DateFrame.csv")

#–£–∫–∞–∑–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
NowDR = []
start_time = datetime.datetime.now()
NowDate = datetime.datetime.now()
time = NowDate.replace(microsecond=0)

#–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
Weather_time = "08:00"
Gift_time = "10:00"
#–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–Ω–¥
@bot.message_handler(commands=['help'])
def get_help(message):
    bot.send_message(message.chat.id, "/ask –í–æ–ø—Ä–æ—Å - –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å chatGPT \n /add - –î–æ–±–∞–≤–∏—Ç—å—Å—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö \n /weather - –í—ã–≤–µ—Å—Ç–∏ –ø–æ–≥–æ–¥—É \n/weather –ì–û–†–û–î- –í—ã–≤–µ—Å—Ç–∏ –ø–æ–≥–æ–¥—É –≤ –≥–æ—Ä–æ–¥–µ \n /forecast - –í—ã–≤–µ—Å—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã \n /generate –û–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω—ã \n Version: " + version)
@bot.message_handler(commands=['start'])
def show_start(message):
    bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç! –Ø - –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤–æ–π –±–æ—Ç AuroraBot {version}, –∏ —è –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–≤–µ—Å–µ–ª–∏—Ç—å—Å—è. –Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ –≤ —Ä–∞–∑–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö /help. –Ø –ª—é–±–ª—é –æ–±—â–∞—Ç—å—Å—è —Å –ª—é–¥—å–º–∏ –∏ —É–∑–Ω–∞–≤–∞—Ç—å —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ. –î–∞–≤–∞–π –ø–æ–æ–±—â–∞–µ–º—Å—è!')
@bot.message_handler(commands=['add'])
def appending(message):
    if str(message.chat.type) != 'private':
        bot.send_message(message.chat.id, "‚ùå–ù–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É –±–æ—Ç—É –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
        error_mess
        sleep(5)
        bot.delete_message(message.chat.id, message_id=error_mess.message_id)
        return False
    if bot.get_chat_member(chatid, message.from_user.id).status == 'left':
        error_mess = bot.send_message(message.chat.id, "‚ùå–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –≥—Ä—É–ø–ø—ã.")
        error_mess
        sleep(5)
        bot.delete_message(message.chat.id, message_id=error_mess.message_id)
        return False
    bot.send_message(message.from_user.id, "–û—Ç–ø—Ä–∞–≤—å –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –Ω—É–ª–µ–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ: Name Day Month. –ü—Ä–∏–º–µ—Ä: –í–∏–∫—Ç–æ—Ä 19 1. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –≤–≤–µ–¥–∏—Ç–µ: –û—Ç–º–µ–Ω–∞")
    log("–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!")
    bot.register_next_step_handler(message,save_new)
@bot.message_handler(commands=['report'])
def report(message):
    argus = message.text.split()
    if len(argus) < 2:
        error = bot.send_message(message.chat.id, "–ü–æ—Å–ª–µ –∫–æ–º–º–∞–Ω–¥—ã –Ω—É–∂–Ω–æ –æ–ø–∏—Å–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—É/–ø–æ–∂–µ–ª–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        error
        sleep(5)
        bot.delete_message(message.chat.id, message_id=error.message_id)
        return False
    argus.pop(0)
    report_text = " ".join(argus)
    log = f"@{message.from_user.username} –æ—Ç–ø—Ä–∞–≤–∏–ª —Ä–µ–ø–æ—Ä—Ç: {report_text}"
    logger.debug(f"–û—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ä–µ–ø–æ—Ä—Ç —Ç–µ—Å—Ç: {log}")
    bot.send_message(admins[0], str(log))
#==========================================================
@bot.message_handler(commands=['sum'])
def get_last_messages(message):
    try:
        time_difference = datetime.datetime.now() - datetime.datetime.fromtimestamp(message.date)
        if time_difference > timedelta(minutes=5):
            bot.send_message(message.chat.id, str("‚ùå–ó–∞–ø—Ä–æ—Å —É—Å—Ç–∞—Ä–µ–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!"))
            return True
        if tex_stat:
            if message.chat.id not in admins:
                bot.send_message(message.chat.id, '‚ùå–ò–¥—É—Ç —Ç–µ—Ö. —Ä–∞–±–æ—Ç—ã! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!')
                return False
        if bot.get_chat_member(chatid, message.from_user.id).status == 'left':
            error_mess = bot.send_message(message.chat.id, "‚ùå–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –≥—Ä—É–ø–ø—ã.")
            error_mess
            sleep(5)
            bot.delete_message(message.chat.id, message_id=error_mess.message_id)
            bot.delete_message(message.chat.id, message_id=message.message_id)
            return False
        if str(message.chat.id) != chatid:
            error_mess = bot.send_message(message.chat.id, "‚ùå–ü—Ä–æ–ø–∏—à–∏—Ç–µ –∫–æ–º–º–∞–Ω–¥—É –≤ –≥—Ä—É–ø–ø–µ.")
            error_mess
            sleep(5)
            bot.delete_message(message.chat.id, message_id=error_mess.message_id)
            bot.delete_message(message.chat.id, message_id=message.message_id)
            return False
        
        bot.send_message(message.chat.id, "‚ùå–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞.")
        return False
    
        command = message.text.split()
        if len(command) < 2:
            summorysen_coll = 350
        command.pop(0)
        summorysen_coll = int(command[0])
        if summorysen_coll not in [50, 100, 150, 300]:
            error_mess = bot.send_message(message.chat.id,"‚ùå–ó–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è: 50,100,150,350. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            error_mess
            sleep(5)
            bot.delete_message(message.chat.id, message_id=error_mess.message_id)
            bot.delete_message(message.chat.id, message_id=message.message_id)
            return False
        mess_anim = bot.send_message(message.chat.id, "üïê–í–∞—à –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...")
        mess_anim
        common_lines = []
        with open("history.txt", 'r') as file:
            for line in file:
                common_lines.append(line.strip())
        file.close()
        get_text = " ".join(common_lines[(len(common_lines) - summorysen_coll):len(common_lines)])
        promt = f'–°—É–º–º–∏—Ä—É–π —ç—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —á—Ç–æ –æ–Ω–∏ –ø–∏—Å–∞–ª–∏ –∫—Ä–∞—Ç–∫–æ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—è –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–ø–∏—Å–∫–æ–º –∞ —Ü–µ–ª—ã–º —Ç–µ–∫—Å—Ç–æ–º –±–µ–∑ –æ–±—â–µ–π —Ç–µ–º—ã –≤ –∫–æ–Ω—Ü–µ –∏ —Å –∫–∞–ø–µ–ª—å–∫–æ–π –¥–∏—á–∏ –æ–±—ä–µ–º: 0.5 —Å—Ç—Ä–∞–Ω–∏—Ü: {get_text}'
        if summorysen_coll <= 100:
            promt = f'–°—É–º–º–∏—Ä—É–π —ç—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —á—Ç–æ –æ–Ω–∏ –ø–∏—Å–∞–ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—è –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–ø–∏—Å–∫–æ–º –∞ —Ü–µ–ª—ã–º —Ç–µ–∫—Å—Ç–æ–º –±–µ–∑ –æ–±—â–µ–π —Ç–µ–º—ã –≤ –∫–æ–Ω—Ü–µ–∏ —Å –∫–∞–ø–µ–ª—å–∫–æ–π –¥–∏—á–∏  –æ–±—ä–µ–º: 1 —Å—Ç—Ä–∞–Ω–∏—Ü: {get_text}'
        if summorysen_coll >= 150:
            promt = f'–°—É–º–º–∏—Ä—É–π —ç—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —á—Ç–æ –æ–Ω–∏ –ø–∏—Å–∞–ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—è –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–ø–∏—Å–∫–æ–º –∞ —Ü–µ–ª—ã–º —Ç–µ–∫—Å—Ç–æ–º –±–µ–∑ –æ–±—â–µ–π —Ç–µ–º—ã –≤ –∫–æ–Ω—Ü–µ –∏ —Å –∫–∞–ø–µ–ª—å–∫–æ–π –¥–∏—á–∏  –æ—á–µ–µ–µ–Ω—å –¥–ª–∏–Ω–Ω–æ –∏ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ –≤ 10 —Å—Ç—Ä–∞–Ω–∏—Ü: {get_text}'
        completion = openai.ChatCompletion.create(
    model="gpt-3.5-turbo-0125",
  messages=[
    {"role": "user", "content": promt}
  ]
)
        complet_text = completion.choices[0].message.content
        markup = types.InlineKeyboardMarkup()
        btn = types.InlineKeyboardButton("‚ù§Ô∏è–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∞–≤—Ç–æ—Ä–∞", url=donate_url)
        markup.add(btn)
        complet_text = str(f"Aurora-{version} - –ü–æ—Å–ª–µ–¥–Ω–∏–µ {summorysen_coll} c–æ–æ–±—â–µ–Ω–∏–π —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–Ω—ã —Ç–∞–∫: \n{complet_text}")
        
        bot.edit_message_text(chat_id=message.chat.id,message_id=mess_anim.message_id,text=complet_text)
        # bot.send_message(message.chat.id,complet_text, reply_markup=markup)
        # bot.delete_message(message.chat.id, message_id=mess_anim.message_id)
        logger.info(f'@{message.from_user.username} —Å—É–º–º–∏—Ä–æ–≤–∞–ª {summorysen_coll} —Å–æ–æ–±—â–µ–Ω–∏–π')
        log(f'@{message.from_user.username} —Å—É–º–º–∏—Ä–æ–≤–∞–ª {summorysen_coll} —Å–æ–æ–±—â–µ–Ω–∏–π')
    except Exception as e:
        log("Error")
        logger.error(f' Summory text error. Code: {e}')
        return False
#=====================================================================
@bot.message_handler(commands=['generate', 'gen'])
def generate_image(message):
    global request_gen_coll
    global request_gen_rekl
    # try:
    if True:
        mess = bot.send_message(message.chat.id, "üïê –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥. –í–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...")
        mess
        time_difference = datetime.datetime.now() - datetime.datetime.fromtimestamp(message.date)
        if time_difference > timedelta(minutes=5):
            # bot.send_message(message.chat.id, str("‚ùå–ó–∞–ø—Ä–æ—Å —É—Å—Ç–∞—Ä–µ–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!"))
            bot.edit_message_text(chat_id=message.chat.id, message_id=mess.message_id, text="‚ùå–ó–∞–ø—Ä–æ—Å —É—Å—Ç–∞—Ä–µ–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!")
            return True
        
        if message.from_user.username == None:
            # error_mess = bot.send_message(message.chat.id, "‚ùå–ü—Ä–µ–∂–¥–µ —á–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–º–∞–Ω–¥—É generate, –Ω–∞–¥–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º!")
            # error_mess
            bot.edit_message_text(chat_id=message.chat.id, message_id=mess.message_id, text="‚ùå–ü—Ä–µ–∂–¥–µ —á–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–º–∞–Ω–¥—É generate, –Ω–∞–¥–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º!")
            sleep(5)
            bot.delete_message(message.chat.id, message_id=mess.message_id)
            bot.delete_message(message.chat.id, message_id=message.message_id)
            return False
            
        if (tex_stat) & (message.chat.id not in admins): 
            bot.edit_message_text(chat_id=message.chat.id, message_id=mess.message_id, text="‚ùå–ò–¥—É—Ç —Ç–µ—Ö. —Ä–∞–±–æ—Ç—ã! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!")
            # bot.send_message(message.chat.id, '‚ùå–ò–¥—É—Ç —Ç–µ—Ö. —Ä–∞–±–æ—Ç—ã! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!')
            return False
        
        time_start = datetime.datetime.now()
        time_start = time_start.replace(microsecond=0)
        
        argus = message.text.split()
        
        if len(argus) < 2:
            # error_mess = bot.send_message(message.chat.id, "‚ùå–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å.–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!")
            # error_mess
            bot.edit_message_text(chat_id=message.chat.id, message_id=mess.message_id, text="‚ùå–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å.–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!")
            sleep(5)
            bot.delete_message(message.chat.id, message_id=mess.message_id)
            bot.delete_message(message.chat.id, message_id=message.message_id)
            return False
        
        argus.pop(0)
        promt = " ".join(argus)
        
        use_tokens = 0
        for i in promt:
            use_tokens+=1
        use_tokens = use_tokens * 5
        
        result = DataBase.check.subscribe(message, bot.get_chat_member(-1002064516590, message.from_user.id).status)
        match result:
            case 401:
                bot.edit_message_text(chat_id=message.chat.id, message_id=mess.message_id, text="‚ùå–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º–∏ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª @Aurorafloodbot_info, –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É")
                # bot.send_message(message.chat.id, "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º–∏ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª @Aurorafloodbot_info, –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É")
                logger.info(f"@{message.from_user.nickname} code: {result}")
                return result
            
        result = DataBase.check.tokens_gen(message, use_tokens)
        match result:
            case 402:
                # bot.send_message(message.chat.id, "‚ùå–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤! –î–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–∏—Å–∞—Ç—å —Å—é–¥–∞ - @ViktorGoldFox")
                bot.edit_message_text(chat_id=message.chat.id, message_id=mess.message_id, text="‚ùå–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤! –î–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–∏—Å–∞—Ç—å —Å—é–¥–∞ - @ViktorGoldFox")
                logger.info(f"@{message.from_user.nickname} code: {result}")
                return result
            case 1:
                DataBase.check.data(message, bot.get_chat_member(chatid, message.from_user.id).status)
        
        api = Generator.Text2ImageAPI('https://api-key.fusionbrain.ai/', '1501B6B5F8996BCE2B0D4E0DAAC0E721', '5C015D1AC4CBB006B3375E00B821A138')
        model_id = api.get_model()
        uuid = api.generate(promt, model=model_id)
        images = api.check_generation(uuid)
        
        if len(images) < 0:
            bot.edit_message_text(chat_id=message.chat.id, message_id=mess.message_id, text="‚ùå–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            #  bot.send_message(message.chat.id, '‚ùå–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.')
        
        if images['censored'] != None:
            if images['censored'] == True:
                # bot.send_message(message.chat.id, '‚ùå–ü—Ä–æ–º—Ç –∑–∞—Ü–µ–Ω–∑—É—Ä–µ–Ω. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞')
                bot.edit_message_text(chat_id=message.chat.id, message_id=mess.message_id, text='‚ùå–ü—Ä–æ–º—Ç –∑–∞—Ü–µ–Ω–∑—É—Ä–µ–Ω. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞')
                return False
        
        
        time_end = datetime.datetime.now()
        time_end = time_end.replace(microsecond=0)
        complet_time = time_end - time_start
        
        request_gen_rekl+=1
        request_gen_coll += 1
        
        logger.info(f"@{message.from_user.username} –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {promt} –í—Ä–µ–º—è –≥–µ–Ω–∞: {complet_time}")
        
        log(f"@{message.from_user.username} –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {promt}")
        
        image_base64 = images['images'][0] 
        image_data = base64.b64decode(image_base64)
        image_name = f'image-'+str(time_end)+'.png'
        
        result = DataBase.give_tokens.gen(message, use_tokens)
                    
        # with open(f'"logs/{image_name}"', "wb") as file:
        #     file.write(image_data)
        #     file.close()
        
        # with open(f'"logs/{image_name}"', 'rb') as im:
        if True:
            im = image_data
            if request_gen_rekl == 5:
                request_gen_rekl = 0
                
                markup = types.InlineKeyboardMarkup()
                btn = types.InlineKeyboardButton("‚ù§Ô∏è–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∞–≤—Ç–æ—Ä–∞", url=donate_url)
                markup.add(btn)
                
                if (str(message.chat.id) != chatid):
                    
                    datauser = pd.read_csv("user.csv")
                    index = datauser.index[datauser['chat_id'] == message.chat.id][0]
                    last_tokens = datauser.loc[index, "tokens"]
                    
                    if str(datauser.loc[index, "status"]) not in ['admin', 'mvp', 'group']:
                        bot.send_photo(message.chat.id, im, caption=str(f"‚úÖKandinsky{model_id} - @{message.from_user.username}, –≤–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∑–∞ " + str(complet_time) + f"\n–ü–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {use_tokens} \n–û—Å—Ç–∞–ª–æ—Å—å: {last_tokens}"), reply_markup=markup)
                    else:
                        bot.send_photo(message.chat.id, im, caption=str(f"‚úÖKandinsky{model_id} - @{message.from_user.username}, –≤–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∑–∞ " + str(complet_time)), reply_markup=markup)
                else:
                    bot.send_photo(message.chat.id, im, caption=str(f"‚úÖKandinsky{model_id} - @{message.from_user.username}, –≤–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∑–∞ " + str(complet_time)), reply_markup=markup)
            else:
                if (str(message.chat.id) != chatid):
                    
                    datauser = pd.read_csv("user.csv")
                    index = datauser.index[datauser['chat_id'] == message.chat.id][0]
                    
                    if str(datauser.loc[index, "status"]) not in ['admin', 'mvp', 'group']:
                        last_tokens = datauser.loc[index, "tokens"]
                        bot.send_photo(message.chat.id, im, caption=str(f"‚úÖKandinsky{model_id} - @{message.from_user.username}, –≤–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∑–∞ " + str(complet_time) + f"\n–ü–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {use_tokens} \n–û—Å—Ç–∞–ª–æ—Å—å: {last_tokens}"))
                    else:
                        bot.send_photo(message.chat.id, im, caption=str(f"‚úÖKandinsky{model_id} - @{message.from_user.username}, –≤–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∑–∞ " + str(complet_time)))
                else:
                    bot.send_photo(message.chat.id, im, caption=str(f"‚úÖKandinsky{model_id} - @{message.from_user.username}, –≤–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∑–∞ " + str(complet_time)))
            # im.close()
        bot.delete_message(message.chat.id, message_id=mess.message_id)
    # except Exception as e:
    #     log("Error")
    #     bot.send_message(message.chat.id, '‚ùå–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.')
    #     logger.error(f'Image generate. code: {e}')
    #     return False

        
#=========================================================
#–í–æ–ø—Ä–æ—Å—ã chat-gpt
@bot.message_handler(commands=['ask'])
def ask_chatgpt(message, chat_state = True):
    global request_gpt_coll
    global request_gpt_rekl
    # try:
    if True:
        mess = bot.send_message(message.chat.id, "üïê –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥. –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è")
        mess
        time_difference = datetime.datetime.now() - datetime.datetime.fromtimestamp(message.date)
        if time_difference > timedelta(minutes=5):
            # bot.send_message(message.chat.id, str("‚ùå–ó–∞–ø—Ä–æ—Å —É—Å—Ç–∞—Ä–µ–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!"))
            bot.edit_message_text(chat_id=message.chat.id, message_id=mess.message_id, text="‚ùå–ó–∞–ø—Ä–æ—Å —É—Å—Ç–∞—Ä–µ–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!")
            return True
        
        if message.from_user.username == None:
            # error_mess = bot.send_message(message.chat.id, "‚ùå–ü—Ä–µ–∂–¥–µ —á–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–º–∞–Ω–¥—É ask, –Ω–∞–¥–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º!")
            # error_mess
            bot.edit_message_text(chat_id=message.chat.id, message_id=mess.message_id, text="‚ùå–ü—Ä–µ–∂–¥–µ —á–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–º–∞–Ω–¥—É ask, –Ω–∞–¥–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º!")
            sleep(5)
            bot.delete_message(message.chat.id, message_id=mess.message_id)
            bot.delete_message(message.chat.id, message_id=message.message_id)
            return False
        # if (datetime.datetime.fromtimestamp()
        if (tex_stat) & (message.chat.id not in admins):
            # bot.send_message(message.chat.id, '‚ùå–ò–¥—É—Ç —Ç–µ—Ö. —Ä–∞–±–æ—Ç—ã! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!')
            bot.edit_message_text(chat_id=message.chat.id, message_id=mess.message_id, text="‚ùå–ò–¥—É—Ç —Ç–µ—Ö. —Ä–∞–±–æ—Ç—ã! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!")
            return False
        
        time_start = datetime.datetime.now()
        time_start = time_start.replace(microsecond=0)
        
        # argus = message.text.split()
        # if len(argus) < 2:
        #     error_mess = bot.send_message(message.chat.id, "‚ùå–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å.–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!")
        #     error_mess
        #     sleep(5)
        #     bot.delete_message(message.chat.id, message_id=error_mess.message_id)
        #     return False
        
        if chat_state:
            argus = message.text.split()
            if len(argus) < 2:
                # error_mess = bot.send_message(message.chat.id, "‚ùå–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å.–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!")
                # error_mess
                bot.edit_message_text(chat_id=message.chat.id, message_id=mess.message_id, text="‚ùå–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å.–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!")
                sleep(5)
                bot.delete_message(message.chat.id, message_id=mess.message_id)
                return False
            argus.pop(0)
            promt = " ".join(argus)
        else:
            promt = message.text
            
        if message.reply_to_message != None:
            promt = f"{promt}: {message.reply_to_message.text}"
        # argus.pop(0)
        # promt = " ".join(argus)
        
        use_tokens = 0
        for i in promt:
            use_tokens+=1
            
        result = DataBase.check.subscribe(message, bot.get_chat_member(-1002064516590, message.from_user.id).status)
        match result:
            case 401:
                bot.edit_message_text(chat_id=message.chat.id, message_id=mess.message_id, text="‚ùå–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º–∏ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª @Aurorafloodbot_info, –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É")
                # bot.send_message(message.chat.id, "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º–∏ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª @Aurorafloodbot_info, –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É")
                # logger.info(f"@{message.from_user.nickname} code: {result}")
                return result
            
        result = DataBase.check.tokens_ask(message, use_tokens)
        match result:
            case 402:
                # bot.send_message(message.chat.id, "‚ùå–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤! –î–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–∏—Å–∞—Ç—å —Å—é–¥–∞ - @ViktorGoldFox")
                bot.edit_message_text(chat_id=message.chat.id, message_id=mess.message_id, text="‚ùå–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤! –î–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–∏—Å–∞—Ç—å —Å—é–¥–∞ - @ViktorGoldFox")
                # logger.info(f"@{message.from_user.nickname} code: {result}")
                return result
            case 1:
                DataBase.check.data(message, bot.get_chat_member(chatid, message.from_user.id).status)
            
        DataBase.give_tokens.ask(message, use_tokens)
#         completion = openai.ChatCompletion.create(
#     model="gpt-3.5-turbo-16k-0613",
#   messages=[
#     {"role": "user", "content": promt}
#   ]
# )
        with GigaChat(credentials=Gigachat_token, verify_ssl_certs=False) as giga:
            response = giga.chat(promt)

        response = response.choices[0].message.content

        # text = str("ChatGPT - " + completion.choices[0].message.content)
        # text = str("ChatGPT - " + response)
        text = str("GigaChat - " + response)
        
        time_end = datetime.datetime.now()
        time_end = time_end.replace(microsecond=0)
        complet_time = time_end - time_start
        
        bot.edit_message_text(chat_id=message.chat.id, message_id=mess.message_id, text=f"‚úÖ–í–∞—à –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞ {complet_time}")
    
        logger.info(f"@{message.from_user.username} –í–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è ChatGPT:{promt} –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {complet_time} –û—Ç–≤–µ—Ç: {text}")
        log(f"@{message.from_user.username} –í–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è ChatGPT:{promt}")
        request_gpt_coll+=1
        request_gpt_rekl+=1
        index = 0
        fix_txt = []
        for i in text:
            if i in ['_', "*", ">", "<", '-', '.', ',', '{', '}', '(', ')', '+', '#', "!", '=']:
                fix_txt.append("\\")
                fix_txt.append(i)
            else:
                fix_txt.append(i)
        text = "".join(fix_txt)
        if request_gpt_rekl == 7:
            request_gpt_rekl = 0
            markup = types.InlineKeyboardMarkup()
            btn = types.InlineKeyboardButton("‚ù§Ô∏è–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∞–≤—Ç–æ—Ä–∞", url=donate_url)
            markup.add(btn)
            bot.send_message(message.chat.id,f"""{text}""", reply_markup=markup, parse_mode='MarkdownV2')
            return False
        argus = text.split()
        if len(argus) > Text_limit:
            txt_one = " ".join(argus[:Text_limit])
            txt_two = " ".join(argus[Text_limit:])
            bot.send_message(message.chat.id, f"""{text}""", parse_mode='MarkdownV2')
            bot.send_message(message.chat.id, txt_two, parse_mode="MarkdownV2")
            return False
        if str(message.chat.id) != chatid: 
            datauser = pd.read_csv("user.csv")
            index = datauser.index[datauser['chat_id'] == message.chat.id][0]
            if (str(datauser.loc[index, 'status']) not in ['admin', 'mvp', 'group']):
                index = datauser.index[datauser['chat_id'] == message.chat.id][0]
                last_tokens = datauser.loc[index, "tokens"]
                bot.edit_message_text(chat_id=message.chat.id, message_id=mess.message_id, text=f"""{text} \n–ü–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {use_tokens} \n–û—Å—Ç–∞–ª–æ—Å—å: {last_tokens}""", parse_mode="MarkdownV2")
                # bot.send_message(message.chat.id, f"""{text} \n–ü–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {use_tokens} \n–û—Å—Ç–∞–ª–æ—Å—å: {last_tokens}""", parse_mode='MarkdownV2')
            else:
                bot.edit_message_text(chat_id=message.chat.id, message_id=mess.message_id, text=f"""{text}""", parse_mode='MarkdownV2')
                # bot.send_message(message.chat.id, f"""{text}""", parse_mode='MarkdownV2')
        else:
            bot.edit_message_text(chat_id=message.chat.id, message_id=mess.message_id, text=f"""{text}""", parse_mode='MarkdownV2')
            
        # bot.delete_message(message.chat.id, message_id=mess.message_id)
    # except Exception as e:
    #     logger.error(f'Chat error. Code: {e}')
    #     log("Error")
    #     bot.send_message(message.chat.id, 'ChatGPT –≤—Ä–µ–º–º–µ–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
#========================================================= 
#–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–Ω–¥
@bot.message_handler(commands=['weather'])
def send_weather_person(message):
    try:
        argus = message.text.split()
        siti = '–°–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥'
        url = 'https://api.openweathermap.org/data/2.5/weather?q=Saint%20Petersburg&units=metric&lang=ru&appid=c38e5a3db7bd33d13d9d0c37f83ccdec'
        if len(argus) > 1:
            argus.pop(0)
            siti = ''.join(argus)
            url = f'https://api.openweathermap.org/data/2.5/weather?q={siti}&units=metric&lang=ru&appid=c38e5a3db7bd33d13d9d0c37f83ccdec'
        weather_data = requests.get(url).json()
        temperature = str(round(weather_data['main']['temp']))
        humidity = str(weather_data['main']['humidity'])
        weathers = str(weather_data['weather'][0]['description'])
        weather_main = str(weather_data['weather'][0]['main'])
        wind = str(weather_data['wind']['speed'])
        bar = str(round(weather_data['main']['pressure'] * 0.750062, 1))
        vid = str(weather_data['visibility'] / 1000)
        morph = pymorphy2.MorphAnalyzer()
        word_c = morph.parse(siti)[0]
        gent = word_c.inflect({'loct'})
        siti = str(gent.word).title()
        text = (f"–í {siti} —Å–µ–π—á–∞—Å: \n–ü–æ–≥–æ–¥–∞: {weathers.title()} \n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temperature} ¬∞C \n–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}% \n–í–µ—Ç–µ—Ä: {wind}m/s \n–î–∞–≤–ª–µ–Ω–∏–µ: {bar}–º–º.—Ä—Ç.—Å—Ç \n–í–∏–¥–∏–º–æ—Å—Ç—å: {vid}km")
        if weather_main == 'Snow':
            snow_coll = weather_data['snow']['1h']
            text = (f"–í {siti} —Å–µ–π—á–∞—Å: \n–ü–æ–≥–æ–¥–∞: {weathers.title()} \n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temperature} ¬∞C \n–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}% \n–í–µ—Ç–µ—Ä: {wind}m/s \n–î–∞–≤–ª–µ–Ω–∏–µ: {bar}–º–º.—Ä—Ç.—Å—Ç \n–í–∏–¥–∏–º–æ—Å—Ç—å: {vid}km \n–°–∫–æ—Ä–æ—Å—Ç—å —Å–Ω–µ–≥–∞: {snow_coll}mm/1h")
        logger.info(f'–í—ã–≤–µ–¥–µ–Ω–Ω–∞ –ø–æ–≥–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {message.from_user.username}')
        log(f'–í—ã–≤–µ–¥–µ–Ω–Ω–∞ –ø–æ–≥–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {message.from_user.username}')
        bot.send_message(message.chat.id,text)   
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–æ–≥–æ–¥–µ: {e}") 
        error_mess = bot.send_message(message.chat.id, '–í –Ω–∞–∑–≤–∞–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!')
        error_mess
        sleep(5)
        bot.delete_message(message.chat.id, message_id=error_mess.message_id)
        bot.delete_message(message.chat.id, message_id=message.message_id)
        return False
#==========================================================
@bot.message_handler(commands=['forecast'])
def send_weather_person(message):
    try:
        argus = message.text.split()
        siti = '–°–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥'
        url = 'http://api.openweathermap.org/data/2.5/forecast?q=Saint%20Petersburg&units=metric&lang=ru&appid=dfe5e468eadee1e20ded5140d398450c'
        if len(argus) > 1:
            argus.pop(0)
            siti = ''.join(argus)
            url = f'http://api.openweathermap.org/data/2.5/forecast?q={siti}&units=metric&lang=ru&appid=dfe5e468eadee1e20ded5140d398450c'
        weather_data = requests.get(url).json()
        global_weather = []
        for i in range(len(weather_data['list'])):
            dt = str(weather_data['list'][i]["dt_txt"])
            test = dt.split()
            dt = dt.replace("-", '\.')
            if test[1] == "12:00:00":
                temperature = str(round(weather_data['list'][i]['main']['temp']))
                humidity = str(weather_data['list'][i]['main']['humidity'])
                weathers = str(weather_data['list'][i]['weather'][0]['description'])
                weather_main = str(weather_data['list'][i]['weather'][0]['main'])
                wind = str(weather_data['list'][i]['wind']['speed'])
                bar = str(round(weather_data['list'][i]['main']['pressure'] * 0.750062, 1))
                vid = str(weather_data['list'][i]['visibility'] / 1000)
                morph = pymorphy2.MorphAnalyzer()
                word_c = morph.parse(siti)[0]
                gent = word_c.inflect({'loct'})
                siti = str(gent.word).title()
                date = str(test[0]).replace("-", '\.')
                text_weather = (f"""\n{date}:```–î–µ–Ω—å: \n–ü–æ–≥–æ–¥–∞: {weathers.title()} \n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temperature} ¬∞C \n–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}% \n–í–µ—Ç–µ—Ä: {wind}m/s \n–î–∞–≤–ª–µ–Ω–∏–µ: {bar}–º–º.—Ä—Ç.—Å—Ç \n–í–∏–¥–∏–º–æ—Å—Ç—å: {vid}km```""")
                global_weather.append(f"{text_weather}")
            if test[1] == "03:00:00":
                temperature1 = str(round(weather_data['list'][i]['main']['temp']))
                humidity1 = str(weather_data['list'][i]['main']['humidity'])
                weathers1 = str(weather_data['list'][i]['weather'][0]['description'])
                weather_main1 = str(weather_data['list'][i]['weather'][0]['main'])
                wind1 = str(weather_data['list'][i]['wind']['speed'])
                bar1 = str(round(weather_data['list'][i]['main']['pressure'] * 0.750062, 1))
                vid1 = str(weather_data['list'][i]['visibility'] / 1000)
                morph = pymorphy2.MorphAnalyzer()
                word_c = morph.parse(siti)[0]
                gent1 = word_c.inflect({'loct'})
                siti = str(gent1.word).title()
                text_weather1 = (f"""```–ù–æ—á—å: \n–ü–æ–≥–æ–¥–∞: {weathers1.title()} \n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temperature1} ¬∞C \n–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity1}% \n–í–µ—Ç–µ—Ä: {wind1}m/s \n–î–∞–≤–ª–µ–Ω–∏–µ: {bar1}–º–º.—Ä—Ç.—Å—Ç \n–í–∏–¥–∏–º–æ—Å—Ç—å: {vid1}km```""")
                global_weather.append(f"{text_weather1}")
        text = " ".join(global_weather)
        bot.send_message(message.chat.id,f"{text}", parse_mode="MarkdownV2")
        logger.info(f'–í—ã–≤–µ–¥–µ–Ω –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {message.from_user.username}')
        log(f'–í—ã–≤–µ–¥–µ–Ω –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {message.from_user.username}')
    except Exception as e:
        error_mess = bot.send_message(message.chat.id, '‚ùå–í –Ω–∞–∑–≤–∞–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!')
        error_mess
        sleep(5)
        bot.delete_message(message.chat.id, message_id=error_mess.message_id)
        bot.delete_message(message.chat.id, message_id=message.message_id)
        return False
#----------------------------------------------------------         
@bot.message_handler(commands=['profile'])
def profile(message): 
    if str(message.chat.type) != 'private':
        bot.send_message(message.chat.id, "‚ùå–ù–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É –±–æ—Ç—É –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
        return False
    datauser = pd.read_csv("user.csv")
    if datauser[datauser['chat_id'] == message.chat.id].shape[0] == 0:
        if bot.get_chat_member(chatid, message.from_user.id).status == 'left':
            append_data = f"{message.from_user.username},{message.chat.id},default,250"
        else:
            append_data = f"{message.from_user.username},{message.chat.id},group,0"
        with open("user.csv", 'a') as csv:
            csv.write(f"\n{append_data}")
            csv.close()
        logger.debug("Add new user")
    datauser = pd.read_csv("user.csv")
    index = datauser.index[datauser['chat_id'] == message.chat.id][0]
    name = datauser.loc[index, "name"]
    status = datauser.loc[index, "status"]
    if str(status) in ['admin', 'mvp', 'group']:
        tokens = '‚àû'
    else:
        tokens = datauser.loc[index, "tokens"]
    form = f"""
    ‚≠êÔ∏è–ü—Ä–æ—Ñ–∏–ª—å
        üìï–ò–º—è: {name}
        üìñ–°—Ç–∞—Ç—É—Å: {status}
        üí≤–¢–æ–∫–µ–Ω—ã: {tokens}
    """
    bot.send_message(message.chat.id, form, parse_mode="MarkdownV2")
#----------------------------------------------------------
@bot.message_handler(commands=['promo'])
def prom(message):
    if len(message.text.split()) < 2:
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ –ø—Ä–æ–º–æ –ø–æ—Å–ª–µ –∫–æ–º–º–∞–Ω–¥—ã')
        return False
    # if message.text.split()[1] in ["8G3H5E7J6K", "X9Z7K1D3C8", "L6M2N9B1V5", "P4O6I8U7Y2","Q1W5E9R4T7","H3J7K6L0P9", "V2B4N1M8X3","Z7X9Y2C6V1", "R4T5Y7U2I8"]:
    datauser = pd.read_csv("user.csv")
    index = datauser.index[datauser['chat_id'] == message.chat.id][0]
    datauser = pd.read_csv("user.csv")
    if str(message.text.split()[1]) == "C5D69F4A2B":
        datauser.loc[index, "tokens"] = 5000
    if str(message.text.split()[1]) == "P4O6I8U7Y2":
        datauser.loc[index, "status"] = 'premium'
    if str(message.text.split()[1]) in ["X9Z7K1D3C8", "L6M2N9B1V5"]:
        datauser.loc[index, "status"] = "mvp"
    datauser.to_csv('user.csv', index=False)
    bot.send_message(message.chat.id, "–ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
    promo = message.text.split()[1]
    logger.warning(f"Promo {promo}")
    
#==========================================================
#admins commands
@bot.message_handler(commands=['send_message'])
def send_message(message):
    if message.chat.id not in admins:
        return False
    argus = message.text.split()
    if len(argus) < 2:
        bot.send_message(message.from_user.id, '–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–º–∞–Ω–¥—ã')
        return False
    argus.pop(0)
    txt = " ".join(argus)
    if txt == 'Update':
        txt = f"""
Aurora V5
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïü–ù–æ–≤–æ–≤–≤–µ–¥–µ–Ω–∏—è:  
‚ïü‚û£–ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π
‚ïü‚û£–î–æ–±–∞–≤–ª–µ–Ω—ã —Ç–æ–∫–µ–Ω—ã(–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –Ω–µ–π—Ä–æ—Å–µ—Ç—è—Ö)
‚ïü‚û£–í –≥—Ä—É–ø–ø–µ GoPopizdim –Ω–µ—Ç—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
‚ïü‚û£–£ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã GoPopizdim –±–æ–ª—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
‚ïü‚û£–£–±—Ä–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /glb
‚ïü‚û£–î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ /profile
‚ïü‚û£–£–ª—É—á—à–µ–Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
                """
    logger.warning(f'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞: {txt}')
    bot.send_message(chatid, f"""{txt}""")#chatid, txt)
    bot.send_message(message.from_user.id, "–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ!")
    
@bot.message_handler(commands=['history_clr'])
def send_message(message):
    if message.chat.id not in admins:
        return False
    argus = message.text.split()
    common_lines = []
    with open("history.txt", 'r') as file:
        for line in file:
            common_lines.append(str(line.strip() + '\n'))
    bot.send_message(message.from_user.id, str(len(common_lines)))
    file.close()
    txt = " ".join(common_lines[int(len(common_lines) - 1001):int(len(common_lines))])
    with open("history.txt", 'w') as file:
        file.write(txt)
    file.close()
    bot.send_message(message.from_user.id, "–£—Å–ø–µ—à–Ω–æ –æ—Ü–∏—â–µ–Ω–Ω–æ!")
    logger.warning(f'@{message.from_user.username} –û—á–∏—Å—Ç–∏–ª –∏—Å—Ç–æ—Ä–∏—é!')
#----------------------------------------------------------      
@bot.message_handler(commands=["send_image"]) 
def send_image(message):
    if message.chat.id not in admins:
        return False
    with open("image.png", 'rb') as im:
            bot.send_photo(chatid, im)
            im.close()
    logger.warning(f'@{message.from_user.username} –û—Ç–ø—Ä–∞–≤–∏–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!')
#----------------------------------------------------------   
@bot.message_handler(commands=['stats', 'info'])
def get_stats(message):
    if message.chat.id not in admins:
        return False
    current_time = datetime.datetime.now()
    current_time = current_time.replace(microsecond=0)
    time_work = current_time - start_time
    bot.send_message(message.from_user.id,f"""```Json
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïü‚û£Status: OK          
‚ïü‚û£Time Work: "{time_work}"
‚ïü‚û£Version: "{version}"
‚ïü‚û£GPT_ask: "{request_gpt_coll}"
‚ïü‚û£Image_gen: "{request_gen_coll}"
```""", parse_mode='MarkdownV2')
    logger.warning(f'@{message.from_user.username} –£–∑–Ω–∞–ª –∏–Ω—Ñ—É!')
#----------------------------------------------------------
@bot.message_handler(commands=['logs'])
def get_logs(message):
    if message.chat.id not in admins:
        return False
    bot.send_document(message.chat.id, document=open('logs.log', 'rb'))
    logger.warning(f'@{message.from_user.username} –ü–æ–ª—É—á–∏–ª –ª–æ–≥–∏!')
#----------------------------------------------------------
@bot.message_handler(commands=['logsclear'])
def clear_logs(message):
    if message.chat.id not in admins:
        return False
    with open('logs.log', 'w+') as log:
        log.write("\n")
    logger.warning(f'@{message.from_user.username} –û—á–∏—Å—Ç–∏–ª –ª–æ–≥–∏!')
    bot.send_message(message.from_user.id, "–õ–æ–≥–∏ –æ—á–∏—â–µ–Ω–Ω—ã!")
#----------------------------------------------------------         
#–¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
#–î–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å!
    
@bot.message_handler(commands=['test'])
def text(message):
    pass
    # bot.send_message(message.chat.id, str(message.date - int(datetime.datetime(1970, 1, 1)).total_seconds()))
    # if message.reply_to_message != None:
    #     bot.send_message(message.chat.id, f"Reply: –°–æ–æ–±—â–µ–Ω–∏–µ: {message.reply_to_message.text}")
        
    
@bot.message_handler(commands=['opros'])
def text(message):
    if message.chat.id not in admins:
        return False
    bot.send_poll(chatid, "–ö–∞–∫ –≤–∞–º –Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è?", ["–°–æ–π–¥–µ—Ç", "–î–Ω–æ"])
    
@bot.message_handler(commands=['tex'])
def text(message):
    global tex_stat
    if message.chat.id not in admins:
        return False
    argus = message.text.split()
    argus.pop(0)
    com = str(argus[0])
    if com == 'On':
        bot.send_message(chatid, 'üïê–ë–æ—Ç –∑–∞–∫—Ä—ã—Ç –Ω–∞ —Ç–µ—Ö. —Ä–∞–±–æ—Ç—ã!üïê')
        logger.warning(f'@{message.from_user.username} –í–∫–ª—é—á–∏–ª —Ç–µ—Ö —Ä–∞–±–æ—Ç—ã!')
        tex_stat = True
    if com == 'Off':
        bot.send_message(chatid, '‚úÖ–ë–æ—Ç –≤–æ—Åc—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ!‚úÖ')
        logger.warning(f'@{message.from_user.username} –í—ã–∫–ª—é—á–∏–ª —Ç–µ—Ö —Ä–∞–±–æ—Ç—ã!')
        tex_stat = False
#---------------------------------------------------------
@bot.message_handler(commands=['Easter'])
def Easter(message):
    import random
    logger.warning(f'@{message.from_user.username} –ù–∞—à–µ–ª –ø–æ—Å—Ö–∞–ª–∫—É!!!!!!!!')
    rand_num = 1#random.randint(0,5)
    if rand_num == 1:
        bot.send_message(message.from_user.id, ".       ‚£Ñ‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚°á\n‚†Ä‚†Ä‚†Ä‚£ª‚£ø‚£∂‚£§‚£Ä‚¢à‚£Ä‚£≤‚£∑‚£ø‚°Ñ‚†Ä‚†Ä‚†Ä\n‚†Ä‚†Ä‚†Ä‚£æ‚£ø‚£ø‚£ø‚£∑‚£ø‚£ø‚£ø‚£ø‚£∑‚£ø‚°Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n‚†Ä‚†Ä‚¢†‚£æ‚£õ‚¢ø‚†ø‚¢ø‚£ø‚£ø‚£ø‚£õ‚£π‚£ø‚£ø‚£Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n‚†Ä‚†Ä‚£∏‚£ø‚£ø‚£ø‚£∂‚£∂‚£∂‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ß‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n‚†Ä‚†ú‚£ø‚°ü‚†∏‚£ø‚£ø‚£ø‚¢ô‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ë‚†Ç‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n‚†Ä‚†Ä‚£ø‚£ó‚†∞‚†ò‚°π‚°è‚£Ä‚°ü‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢Ü‚†Ä‚†Ä‚†Ä‚†Ä‚°Ä‚¢Ä‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n‚†Ä‚†ò‚£ø‚£Ω‚†Ä‚†Ä‚†Å‚†Å‚†ò‚†Ω‚¢ª‚£ø‚°è‚£π‚£ø‚°ø‚£ø‚†Å‚†â‚¢Ä‚£§‚£æ‚£æ‚£ø‚£ø‚†ó‚†ã‚†Å‚†Ä‚†Ä\n‚†Ä‚†Ä‚†∏‚°∏‚£¶‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£∏‚£ø‚£ß‚£ø‚£ø‚°ó‚†É‚†Ä‚£ê‚£æ‚£ø‚£ø‚£ø‚†õ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚£∑‚£∂‚£≤‚£∑‚£Ñ‚°æ‚£Ω‚£ü‚£õ‚£õ‚£õ‚°ì‚†∂‚£ü‚£ø‚£ø‚°ø‚£µ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚£ø‚£ø‚£´‚£ø‚£Ω‚£ø‚£∂‚£∂‚£∂‚£ø‚°û‚†ò‚£ø‚£ø‚£ø‚£∑‚£¶‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢π‚¢ø‚¢è‚£ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ó‚†Ä‚†Ä‚†à‚†ª‚£ø‚£ø‚£ø‚£ß‚¢®‚†Ä‚†Ä‚†Ä‚†Ä\n‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ç‚£º‚°æ‚°ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†ª‚£ø‚£ø‚£æ‚£Ü‚†Ä‚†Ä‚†Ä\n‚†Ä‚†Ä‚†Ä‚¢Ä‚†Ä‚†ç‚£ø‚£ª‚£¶‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£á‚¢Ç‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚£ø‚£ø‚£ø‚£á‚°Ñ‚†Ä\n‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚£ß‚£∏‚£ø‚£ø‚°ø‚°ø‚†ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚£ø‚£ø‚£ø‚£ø‚†Ä\n‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£∏‚£ø‚£ø‚£ø‚£ü‚£ø‚£æ‚£∑‚°ª‚£ç‚¢Ω‚£ø‚£ø‚°Ñ‚¢Ä‚°Ä‚¢Ä‚°Ä‚†Ä‚†Ä‚£ø‚£ø‚£ø‚£ø‚†Ä\n‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚£ø‚°ü‚¢ã‚£ª‚†ø‚£ø‚£ø‚£ø‚£∑‚£ø‚£ø‚£∑‚°Ñ‚†ñ‚¢Ä‚†Ä‚†à‚†Ä‚†ª‚£ø‚°ü‚†É‚†Ä\n‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚£ø‚£ø‚¢Å‚£æ‚£ø‚£ø‚°æ‚°ú‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∂‚£§‚°Ä‚†Ä‚†Ä‚†Ä‚¢†‚°Ñ‚†Ä‚†Ä\n‚†Ä‚†Ä‚†Ä‚¢Ä‚£ø‚£ø‚£ø‚£ø‚¢∏‚£ø‚£ø‚£ø‚£ø‚£µ‚°ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£Ñ‚£Ä‚£º‚°ó‚†Ä‚†Ä\n‚†Ä‚†Ä‚†Ä‚£∏‚¢ø‚£ø‚£ø‚£ø‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚†ü‚†ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚†Ü‚†Ä\n‚†Ä‚†Ä‚††‚†ª‚†ø‚£ø‚£≠‚£Ω‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£¶‚£Ω‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ü‚†â‚†Å‚†Ä‚†Ä\n‚†Ä‚†Ä‚†ò‚£§‚£Ä‚£É‚£Ä‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚†ª‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ã‚£†‚£¥‚†á‚†Ä‚†Ä\n‚†Ä‚†Ä‚†Ä‚†∏‚†â‚†π‚†á‚†Ä‚†à‚£ª‚£ø‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†´‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚†è‚†Ä‚†Ä‚†Ä\n‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚††‚†Ä‚£ß‚£ø‚£ø‚†ü‚†É‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†â‚†â‚†Ä‚†Ä‚†Ä‚°∂‚£§‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ø‚£ø‚£ã‚°í‚¢§‚£Ñ‚£Ä‚£†‚°Ñ\n")
    if rand_num == 2:
        pass
    if rand_num == 3:
        pass
    if rand_num == 4:
        pass
    if rand_num == 5:
        pass
#=========================================================
#–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–≥–æ–¥—ã 
def send_weather():
    try:
        #–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã —Å —Å–∞–π—Ç–∞ OpenWeather
        try:
            weather_data = requests.get(url).json()
            temperature = str(round(weather_data['main']['temp']))
            humidity = str(weather_data['main']['humidity'])
            weathers = str(weather_data['weather'][0]['description'])
            weather_main = str(weather_data['weather'][0]['main'])
            wind = str(weather_data['wind']['speed'])
            bar = str(round(weather_data['main']['pressure'] * 0.750062, 1))
            vid = str(weather_data['visibility'] / 1000)
        except Exception as e:
            return False
        #–ü–æ–º–µ–Ω—è–π—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ–¥ —Å–≤–æ–π!
        text = (f"–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, –ü–µ—Ç–µ—Ä–±—É—Ä–∂—Ü—ã! \n–í –≥–æ—Ä–æ–¥–µ —Å–µ–π—á–∞—Å: \n–ü–æ–≥–æ–¥–∞: {weathers.title()} \n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temperature} ¬∞C \n–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}% \n–í–µ—Ç–µ—Ä: {wind}m/s \n–î–∞–≤–ª–µ–Ω–∏–µ: {bar}–º–º.—Ä—Ç.—Å—Ç \n–í–∏–¥–∏–º–æ—Å—Ç—å: {vid}km")
        if weather_main == 'Snow':
            snow_coll = weather_data['snow']['1h']
            print(snow_coll)
            text = (f"–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, –ü–µ—Ç–µ—Ä–±—É—Ä–∂—Ü—ã! \n–í –≥–æ—Ä–æ–¥–µ —Å–µ–π—á–∞—Å: \n–ü–æ–≥–æ–¥–∞: {weathers.title()} \n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temperature} ¬∞C \n–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}% \n–í–µ—Ç–µ—Ä: {wind}m/s \n–î–∞–≤–ª–µ–Ω–∏–µ: {bar}–º–º.—Ä—Ç.—Å—Ç \n–í–∏–¥–∏–º–æ—Å—Ç—å: {vid}km \n–°–∫–æ—Ä–æ—Å—Ç—å —Å–Ω–µ–≥–∞: {snow_coll}mm/1h")
        #–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –≥—Ä—É–ø–ø—É
        bot.send_message(chatid,text)
        logger.info(f'–ü–æ–≥–æ–¥–∞ –≤ 8:00 —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞')
        if int(temperature) < -15:
            bot.send_message(chatid,"–ß–∞—Ç–∏–∫, –Ω–µ –º–æ—Ä–æ–∑—å—Ç–µ –∂—ë–ø–∫–∏, –æ–¥–µ–≤–∞–π—Ç–µ—Å—å —Ç–µ–ø–ª–µ–µ.")
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –≤ –ø–æ–≥–æ–¥–µ. –ö–æ–¥: {e}')
#==========================================================
#–£–∫–∞–∑–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –∫–æ–º–º–∞–Ω–¥
def treager():
    while True:
        schedule.run_pending()
        sleep(1)
#----------------------------------------------------------  
def check(NowDay=0,NowMonth=0):
    try:
        # NowDate = datetime.datetime.now()
        # NowDay = NowDate.day
        # NowMonth = NowDate.month
        
        if int(data[(data['dday'] == NowDay) & (data["dmon"] == NowMonth)].shape[0]) <= 0:
            logger.info("–ò–º–µ–Ω–Ω–∏–∫–æ–≤ –Ω–µ—Ç—É!")
            return False
        
        NowDR = []
        if int(data[(data['dday'] == NowDay) & (data["dmon"] == NowMonth)].shape[0]) >= 1:
            NowDR = data.index[(data['dday'] == NowDay) & (data["dmon"] == NowMonth)].tolist()
            print(NowDR)
            
        ind = 0
        for b in range(int(len(NowDR))):
            #–ó–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ —Å–≤–æ–π!
            text = "–î–æ–±—Ä–æ–≥–æ –¥–Ω—è! –°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É " + data.loc[NowDR[ind],"nickname"] + ", –ø–æ–∂–µ–ª–∞–µ–º " + data.loc[NowDR[ind],"Username"] + " —É–¥–∞—á–∏, —Å—á–∞—Å—Ç—å—è, –æ—Ç–ª–∏—á–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∏ –≤—Å–µ–≥–æ –Ω–∞–∏–ª—É—á—à–µ–≥–æ!\n"
            bot.send_message(chatid,"‚Äì=‚Äì=‚Äì=‚Äì=‚Äì=‚Äì=‚Äì=‚Äì=‚Äì=‚Äì=‚Äì=‚Äì\n" + text + "‚Äì=‚Äì=‚Äì=‚Äì=‚Äì=‚Äì=‚Äì=‚Äì=‚Äì=‚Äì=‚Äì=‚Äì")
            logger.info(f'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ' + data.loc[NowDR[ind],"nickname"])
            ind += 1
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
#----------------------------------------------------------      
def save_new(message):
    if message.text == "–û—Ç–º–µ–Ω–∞" or message.text == '–æ—Ç–º–µ–Ω–∞':
        bot.send_message(message.from_user.id, "–û—Ç–º–µ–Ω—è—é")
        return False
    try:
        argus = message.text.split()
        morph = pymorphy2.MorphAnalyzer()
        word_c = morph.parse(argus[0])[0]
        gent = word_c.inflect({'datv'})
        save_text = str((gent.word).title() + "," + "@" +message.from_user.username + "," + argus[1] + "," + argus[2])
        day_range = 0
        month_range = 0
        
        for i in argus[1]:
            day_range += 1
            if i == "0":
                #–ó–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ —Å–≤–æ–π!
                bot.send_message(message.from_user.id, "–Ø –∂–µ —Å–∫–∞–∑–∞–ª –±–µ–∑ –Ω—É–ª–µ–π. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
                bot.send_message(message.from_user.id, "–û—Ç–ø—Ä–∞–≤—å –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –Ω—É–ª–µ–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ: Name Nickname Day Month. –ü—Ä–∏–º–µ—Ä: –í–∏–∫—Ç–æ—Ä @Test 1 5")
                bot.register_next_step_handler(message,save_new)
                return False
        
        for i in argus[2]:
            month_range += 1
            if i == "0":
                #–ó–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ —Å–≤–æ–π!
                bot.send_message(message.from_user.id, "–Ø –∂–µ —Å–∫–∞–∑–∞–ª –±–µ–∑ –Ω—É–ª–µ–π. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
                bot.send_message(message.from_user.id, "–û—Ç–ø—Ä–∞–≤—å –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –Ω—É–ª–µ–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ: Name Nickname Day Month. –ü—Ä–∏–º–µ—Ä: –í–∏–∫—Ç–æ—Ä @Test 1 5")
                bot.register_next_step_handler(message,save_new)
                return False
        if day_range > 2 or day_range < 1 or month_range > 2 or day_range < 1 or int(argus[1]) > 31 or int(argus[2]) > 12:
            #–ó–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ —Å–≤–æ–π!
            bot.send_message(message.from_user.id, "–¢–∞–∫–æ–π –¥–∞—Ç—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
            bot.send_message(message.from_user.id, "–û—Ç–ø—Ä–∞–≤—å –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –Ω—É–ª–µ–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ: Name Nickname Day Month. –ü—Ä–∏–º–µ—Ä: –í–∏–∫—Ç–æ—Ä @Test 1 5")
            bot.register_next_step_handler(message,save_new)
            return False
        
        with open('NewData.txt', 'a') as f:
            f.write(save_text + '\n')
        #–ó–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ —Å–≤–æ–π!
        bot.send_message(message.from_user.id, "–õ–∞–¥–Ω–æ-–ª–∞–¥–Ω–æ, –∑–∞–ø–∏—Å–∞–ª, –æ—Ç—Å—Ç–∞–Ω—å")
        logger.info(f'–ó–∞–ø–∏—Å–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {save_text}')
        f.close()
    except Exception as e:
        # –ó–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ —Å–≤–æ–π!
        bot.send_message(message.from_user.id, "–£ –≤–∞—Å —á—Ç–æ-—Ç–æ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        bot.send_message(message.from_user.id, "–û—Ç–ø—Ä–∞–≤—å –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –Ω—É–ª–µ–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ: Name Nickname Day Month. –ü—Ä–∏–º–µ—Ä: –í–∏–∫—Ç–æ—Ä @Test 1 5")
        bot.register_next_step_handler(message,save_new)
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è! –ö–æ–¥: {e}")
        return False

def add_tokens_all():
    datauser = pd.read_csv("user.csv")
    for i in range(datauser.shape[0]):
        if str(datauser.loc[i, 'status']) == 'default':
            datauser.loc[i, 'tokens'] = 250
        if str(datauser.loc[i, 'status']) == 'group':
            datauser.loc[i, 'tokens'] = 800
        if str(datauser.loc[i, 'status']) == 'vip':
            datauser.loc[i, 'tokens'] = 1000
        if str(datauser.loc[i, 'status']) == 'premium':
            datauser.loc[i, 'tokens'] = 250
    datauser.to_csv('user.csv', index=False)
#==========================================================
#–ó–∞–ø–∏—Å—å –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
@bot.message_handler(func=lambda message: message.chat.id == int(chatid), content_types=['text'])
def write_chat_history(message):
    if True:
        message_text = str(message.text)
        message_username = str(message.from_user.username)
        save_text = str(message_username + ":" + message_text + '\n')
        with open("history.txt", 'a', encoding='utf-8') as file:
            file.write(str(save_text))
        file.close()

@bot.message_handler(func=lambda message: message.chat.id != int(chatid), content_types=['text'])
def localchatgpt(message):
    if message.chat.type == 'private':
        ask_chatgpt(message, chat_state=False)

def log(text):
    for i in range(len(push_message_admin)):
        bot.send_message(push_message_admin[i], text)
#==========================================================
#–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–æ–≤
schedule.every().sunday.at("00:00").do(add_tokens_all)
schedule.every().day.at(Weather_time).do(send_weather)
schedule.every().day.at(Gift_time).do(check)   

#–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–æ–≤
threading_treager = threading.Thread(target=treager)
threading_treager.start()

# –†—É—á–Ω–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–Ω–∏–µ
# –†–∞—Å–∫–æ–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–∫—É –Ω–∏–∂–µ, —É–∫–∞–∑–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å –∏ –º–µ—Å—è—Ü –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Ç–∏—Ç—å —Å–∫—Ä–∏–ø—Ç
# check(NowDay=10, NowMonth=2)

#==========================================================
#–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
log("–ë–æ—Ç —Å—Ç–∞—Ä—Ç!")
# check(5,5)
try:
# if True:
    bot.infinity_polling()
except Exception as e:
    logger.error(f"[Error] Time out. code: {e}")
    # import Config_bot
    # Config_bot.reloader()
